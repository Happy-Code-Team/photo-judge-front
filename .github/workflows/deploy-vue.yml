# .github/workflows/deploy-vue.yml
name: Deploy Vue.js App

on:
  push:
    branches:
      - main # 当推送到 main 分支时触发
  pull_request:
    branches:
      - main # 当有拉取请求合并到 main 分支时触发

jobs:
  build-and-deploy:
    runs-on: self-hosted # 确保这里与GitHub页面显示的标签完全一致

    steps:
      # 第一步：获取仓库代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # 第二步：设置 Node.js 环境并启用 npm 缓存
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x' # 确保与你的项目兼容
          cache: 'npm' # 如果你使用 yarn，改为 'yarn'

      # 第三步：构建 Docker 镜像
      - name: Build Docker Image
        run: |
          # 定义本地镜像名称，确保不会与你的 Spring Boot 镜像冲突
          FRONTEND_IMAGE_NAME="vue-frontend-app"
          IMAGE_TAG="latest"
          docker build -t ${FRONTEND_IMAGE_NAME}:${IMAGE_TAG} . # . 表示在当前目录查找 Dockerfile

      # 第四步：停止并移除旧容器
      - name: Stop and remove old container
        run: |
          CONTAINER_NAME="vue-frontend-container" # 定义一个独一无二的容器名称
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true

      # 第五步：启动新的 Docker 容器
      # 请仔细重新输入这部分，确保每个反斜杠 '\' 后面都没有空格！
      - name: Run Docker container
        run: |
          FRONTEND_IMAGE_NAME="vue-frontend-app"
          IMAGE_TAG="latest"
          CONTAINER_NAME="vue-frontend-container"
          EXTERNAL_PORT="3000" # 宿主机上你希望访问前端的端口
          INTERNAL_PORT="80"   # 容器内部 Nginx 监听的端口 (Dockerfile中 EXPOSE 的端口)

          docker run -d \
          --name ${CONTAINER_NAME} \
          -p ${EXTERNAL_PORT}:${INTERNAL_PORT} \
          --add-host host.docker.internal:host-gateway \
          ${FRONTEND_IMAGE_NAME}:${IMAGE_TAG}

      # 第六步：清理旧的悬挂 Docker 镜像
      - name: Clean up old dangling Docker images
        run: |
          docker image prune -f # -f 强制执行，无需确认